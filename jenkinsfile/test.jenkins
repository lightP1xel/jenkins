#!groovy

properties([disableConcurrentBuilds()])

pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    environment {
        DEPLOY_ENV = 'Production'
        MY_CREDENTIALS = credentials('8016cbb3-a6d4-4154-b851-4bc1d24133e1')
        TELEGRAM_BOT_TOKEN = '7765267101:AAG-tQAqLf1qng7Rd3ZYrBqK3RIlYs6BTDk'
        TELEGRAM_CHAT_ID = '-1002430220793'
    }
    stages {
        stage("Telegram notification start build") {
            steps {
                script {
                    def message = "Build started: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
                    def url = "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage"
                    def payload = """
                    {
                        "chat_id": "${TELEGRAM_CHAT_ID}",
                        "text": "${message}"
                    }
                    """
                    sh """
                        curl -X POST ${url} \
                        -H 'Content-Type: application/json' \
                        -d '${payload}'
                    """
                }
            }
        }

        stage('Check Docker Container status.') {
            steps {
                script {
                    def isContainerRunning = sh(
                        script: 'ssh root@192.168.200.106 "docker ps --filter "name=go_app" --format "{{.Names}}""',
                        returnStdout: true
                    ).trim()

                    env.CONTAINER_RUNNING = isContainerRunning == "go_app" ? "true" : "false"
                }
            }
        }

        stage('Run If Container Is Running.') {
            when {
                expression { return env.CONTAINER_RUNNING == "true" }
            }
            steps {
                echo 'Docker container is running. I will stop it now!'
                sh 'ssh root@192.168.200.106 \'docker stop go_app\''
            }
        }

        stage('Skip If Container Is Not Running.') {
            when {
                expression { return env.CONTAINER_RUNNING == "false" }
            }
            steps {
                echo 'Docker container is not running. I will skip this step!'
            }
        }

        stage("Build docker container.") {
            steps {
                sh 'ssh root@192.168.200.106 \'docker build --tag go /root/jenkins\''
            }
        }

        stage("Run docker container.") {
            steps {
                sh 'ssh root@192.168.200.106 \'docker run --rm --name go_app -p 8081:8080 -d go\''
            }
        } 
    }
    post {
            success {
                script {
                    def message = "✅ Build SUCCESSFUL: ${env.JOB_NAME} #${env.BUILD_NUMBER}. \n User: ${MY_CREDENTIALS_USR}. \n Environment: ${DEPLOY_ENV}"
                    sendTelegramMessage(message)
                }
            }
            failure {
                script {
                    def message = "❌ Build FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
                    sendTelegramMessage(message)
                }
            }
            aborted {
                script {
                    def message = "⚠️ Build ABORTED: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
                    sendTelegramMessage(message)
                }
            }
        }    
}

def sendTelegramMessage(String message) {
        def url = "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage"
        def payload = """
        {
            "chat_id": "${TELEGRAM_CHAT_ID}",
            "text": "${message}"
        }
        """
        sh """
            curl -X POST ${url} \
            -H 'Content-Type: application/json' \
            -d '${payload}'
        """
        } 