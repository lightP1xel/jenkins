#!groovy

properties([disableConcurrentBuilds()])

pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    stages {
        stage('Check Docker Container') {
            steps {
                script {
                    def isContainerRunning = sh(
                        script: 'ssh root@192.168.200.106 "docker ps --filter "name=go_app" --format "{{.Names}}""',
                        returnStdout: true
                    ).trim()

                    env.CONTAINER_RUNNING = isContainerRunning == "go_app" ? "true" : "false"
                }
            }
        }

        stage('Run If Container Is Running') {
            when {
                expression { return env.CONTAINER_RUNNING == "true" }
            }
            steps {
                echo 'Docker container запущен. Останавливаю!'
                sh 'ssh root@192.168.200.106 \'docker stop go_app\''
            }
        }

        stage('Skip If Container Is Not Running') {
            when {
                expression { return env.CONTAINER_RUNNING == "false" }
            }
            steps {
                echo 'Docker container не запущен. Пропускаю этот шаг!'
            }
        }

        stage("Build dockerfile") {
            steps {
                sh 'ssh root@192.168.200.106 \'docker build --tag go /root/jenkins\''
            }
        }
        stage("Docker run") {
            steps {
                sh 'ssh root@192.168.200.106 \'docker run --rm --name go_app -p 8081:8080 -d go\''
            }
        }
    }
}